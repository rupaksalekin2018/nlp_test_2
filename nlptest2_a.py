# -*- coding: utf-8 -*-
"""nlpTest2_A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b8DwU6-iNqagV1eViSskxranFDu3v2-V
"""

#### Exam A
import pandas as pd
import re

#### Exam A
customer_reviews = [ {'product_id': 101, 'review': 'This product is amazing! I love it.'},
                    {'product_id': 102, 'review': 'The quality is not as expected. Disappointed.'},
                     {'product_id': 103, 'review': 'Great value for the price. Highly recommended.'},
                      {'product_id': 104, 'review': 'Not happy with the purchase. Will return it.'},
                       {'product_id': 105, 'review': 'Excellent service. Fast delivery..'} ]

df = pd.DataFrame(customer_reviews)

df

positive_words = ['amazing', 'love', 'great', 'excellent', 'recommended', 'Highly']

# filtering the rows where is positive reviews
positive_reviews_index = []
for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      if j.lower() in positive_words:
            print(j)
            positive_reviews_index.append(k)
            break

positive_reviews_index

# 1. Identify and count the number of reviews that express a positive sentiment.
count_of_positive_reviews = len(positive_reviews_index)
print('count of positve reviews : ',count_of_positive_reviews)

positive_reviews = []

print('The positive reviews are listed below:')
for i in positive_reviews_index:
    print(df['review'][i])
    positive_reviews.append({'row_index': i, 'product_id': df['product_id'][i], 'sentence': df['review'][i]})

positive_reviews

negative_words = ['return', 'disappointed']

# filtering the rows where is negative reviews
negative_reviews_index = []
for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      if j.lower() in negative_words:
            # print(j)
            negative_reviews_index.append(k)
            break

# 2. Identify and list the product IDs and reviews for the products with negative sentiments.
count_of_negative_reviews = len(negative_reviews_index)
print('count of negative reviews : ',count_of_negative_reviews)

negative_reviews = []

print('The negative reviews are listed below:')
for i in negative_reviews_index:
    print(df['review'][i])
    negative_reviews.append({'row_index': i, 'product_id': df['product_id'][i], 'sentence': df['review'][i]})

negative_reviews

#  3. Calculate the average length (number of words) of the reviews

total_words_list = []

for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      total_words_list.append(j)

# print(total_words_list)
length_of_total_words = len(total_words_list)
total_length_of_reviews = len(df['review'])
# print(total_length_of_reviews)

average_length_of_words = length_of_total_words/total_length_of_reviews
print('average number of words:', average_length_of_words)

# 4. Determine the product that is mentioned the most in the reviews.

# Count the occurrences of each product_id
product_counts = df['product_id'].value_counts()

print(product_counts)

# 5. Create a distribution of sentiments (positive, negative, neutral) for the reviews.

length_of_positive_reviews = len(positive_reviews)
length_of_negative_reviews = len(negative_reviews)

distribution_of_reviews = [{'total_reviews': len(df['review'])},{'length_of_positive_reviews': length_of_positive_reviews}, {'length_of_negative_reviews': length_of_negative_reviews}]

print(distribution_of_reviews)

# 6. Extract key words or phrases from the reviews that frequently appear.

total_words_list = []

for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      total_words_list.append(j)

word_repeat_dict = {}

# print(bool(word_repeat_dict))

for i,v in enumerate(total_words_list):
  # empty dict and key check
    if bool(word_repeat_dict) == False or v not in word_repeat_dict:
        word_repeat_dict[v] = 1

    elif word_repeat_dict[v] >= 1:
        word_repeat_dict[v] = word_repeat_dict[v] + 1

word_repeat_dict

temp_max = 0

repeated_word_max = {}

for i in word_repeat_dict:
  if(word_repeat_dict[i]>temp_max):
    temp_max = word_repeat_dict[i]
    repeated_word_max = {'max_repeated_word': i, 'no. of repetition': word_repeat_dict[i]}

print(repeated_word_max)

# 7. Find and display the longest review along with its product ID.

temp_max = 0

longest_review = {}

for i, v in df['review'].items():
  if len(v) > temp_max:
    temp_max = len(v)
    longest_review = {'product_id': df['product_id'][i], 'review': v}

print('longest product review and its id :', longest_review)

# 8. Identify products that have both positive and negative reviews.
# print(df.iloc[0])
print(positive_reviews_index)
print(negative_reviews_index)



# Python program to illustrate the intersection
# of two lists using set() method
def intersection(lst1, lst2):
    return list(set(lst1) & set(lst2))

products_having_both_positive_negative = intersection(positive_reviews_index, negative_reviews_index)

products_having_both_positive_negative

print('Products having the both positive and negative reviews :')
for i in products_having_both_positive_negative:
  print(df.iloc[i])

# 9. Change the sentiment of a selected review from positive to negative and vice versa.
positive_reviews

# filtering the rows where is positive reviews
# positive_reviews_index = []
for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      # print(j)
      if j.lower() in positive_words:
            new_sentence = j.lower().replace('!', '.')
            new_sentence = re.sub(j, 'not'+' '+j, i, flags=re.IGNORECASE)
            new_sentence = new_sentence.replace('!', '.')
            new_sentences = re.split(r'(?<=\w\.)\s', new_sentence)
            print(new_sentences[0])
            break

negative_reviews

# filtering the rows where is negative reviews
# positive_reviews_index = []
for k, i in df['review'].items():
    # print(k)
    word_list = i.split()
    for j in word_list:
      # print(j)
      # removing punctuation
      j = re.sub(r'[^\w\s]', '', j)
      # print(j)
      if j.lower() in negative_words:
            new_sentence = re.sub('not', '', i, flags=re.IGNORECASE)
            new_sentence = new_sentence.replace('!', '.')
            new_sentences = re.split(r'(?<=\w\.)\s', new_sentence)
            print(new_sentences[0])

# 10.Compare the similarity between two selected reviews without using any similarity metrics directly.

# Function to clean and split review into words
def split_into_words(review):
    return set(review.lower().replace('.', '').replace(',', '').split())

review1 = df['review'][0]
review2 = df['review'][1]

# Splited reviews into words
words_review1 = split_into_words(review1)
words_review2 = split_into_words(review2)

# common words finding
common_words = words_review1.intersection(words_review2)

# Simple similarity score: number of common words
similarity_score = len(common_words)


print(common_words, similarity_score)

